const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Stockage en mÃ©moire (simple pour dÃ©buter)
let tasks = [
  { id: 1, title: "Apprendre Docker", completed: false },
  { id: 2, title: "CrÃ©er une API", completed: true }
];
let nextId = 3;

// Routes

// GET /tasks - RÃ©cupÃ©rer toutes les tÃ¢ches
app.get('/tasks', (req, res) => {
  res.json({
    success: true,
    data: tasks,
    count: tasks.length
  });
});

// GET /tasks/:id - RÃ©cupÃ©rer une tÃ¢che par ID
app.get('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const task = tasks.find(t => t.id === id);
  
  if (!task) {
    return res.status(404).json({
      success: false,
      message: "TÃ¢che non trouvÃ©e"
    });
  }
  
  res.json({
    success: true,
    data: task
  });
});

// POST /tasks - CrÃ©er une nouvelle tÃ¢che
app.post('/tasks', (req, res) => {
  const { title, completed = false } = req.body;
  
  if (!title || title.trim() === '') {
    return res.status(400).json({
      success: false,
      message: "Le titre est requis"
    });
  }
  
  const newTask = {
    id: nextId++,
    title: title.trim(),
    completed
  };
  
  tasks.push(newTask);
  
  res.status(201).json({
    success: true,
    data: newTask,
    message: "TÃ¢che crÃ©Ã©e avec succÃ¨s"
  });
});

// PUT /tasks/:id - Modifier une tÃ¢che
app.put('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const taskIndex = tasks.findIndex(t => t.id === id);
  
  if (taskIndex === -1) {
    return res.status(404).json({
      success: false,
      message: "TÃ¢che non trouvÃ©e"
    });
  }
  
  const { title, completed } = req.body;
  
  if (title !== undefined) {
    tasks[taskIndex].title = title.trim();
  }
  if (completed !== undefined) {
    tasks[taskIndex].completed = completed;
  }
  
  res.json({
    success: true,
    data: tasks[taskIndex],
    message: "TÃ¢che mise Ã  jour avec succÃ¨s"
  });
});

// DELETE /tasks/:id - Supprimer une tÃ¢che
app.delete('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const taskIndex = tasks.findIndex(t => t.id === id);
  
  if (taskIndex === -1) {
    return res.status(404).json({
      success: false,
      message: "TÃ¢che non trouvÃ©e"
    });
  }
  
  const deletedTask = tasks.splice(taskIndex, 1)[0];
  
  res.json({
    success: true,
    data: deletedTask,
    message: "TÃ¢che supprimÃ©e avec succÃ¨s"
  });
});

// Route de santÃ©
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Gestion des routes non trouvÃ©es
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: "Route non trouvÃ©e"
  });
});

// DÃ©marrage du serveur
app.listen(PORT, () => {
  console.log(`ğŸš€ Serveur dÃ©marrÃ© sur le port ${PORT}`);
  console.log(`ğŸ“‹ API disponible sur http://localhost:${PORT}/tasks`);
  console.log(`ğŸ’š Health check sur http://localhost:${PORT}/health`);
});